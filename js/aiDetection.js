// New AI Detection function to handle circular progress with animation

async function generateAIDetection() {
    const input = document.getElementById('ai-detection-input').value.trim();
    if (!input) return showError('ai-detection-output', 'Please enter a paragraph');
    
    // Revised prompt instructs the API to return only a single numeric value, but
    // if additional text is included, our extraction will pick the last number found.
    await generateAIResponseForAIDetection({
        input: input,
        outputElement: 'ai-detection-output',
        promptTemplate: PROMPT_TEMPLATES.aiDetection(input),  // AI detection prompt
        loadingText: 'Detecting AI content...'
    });
}

// New AI Detection function that processes the API response robustly and updates the UI
async function generateAIResponseForAIDetection({ input, outputElement, promptTemplate, loadingText }) {
    const output = document.getElementById(outputElement);
    output.innerHTML = `
        <div class="loading">
            <i class="fas fa-spinner fa-spin"></i> ${loadingText}
        </div>
    `;
    
    try {
        const response = await fetch(API_URL, {
            method: "POST",
            headers: {
                "Authorization": `Bearer ${API_KEY}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                "model": MODEL,
                "messages": [{
                    "role": "user",
                    "content": promptTemplate
                }]
            })
        });

        const data = await response.json();
        console.log("Full API response:", data);
        
        const result = data.choices[0].message.content;
        console.log("Extracted API result:", result);

        // Improved extraction: Use regex to find all numbers and choose the last occurrence.
        const extractPercentage = (text) => {
            const matches = [...text.matchAll(/(\d+(\.\d+)?)/g)];
            return matches.length ? parseFloat(matches[matches.length - 1][0]) : NaN;
        };

        const percentage = extractPercentage(result);

        if (isNaN(percentage)) {
            output.innerHTML = `
                <div class="error">
                    <i class="fas fa-exclamation-triangle"></i> Error: Unable to extract a numeric value from the API response.
                </div>
            `;
            return;
        }

        // Clamp the percentage between 0 and 100
        const clampedPercentage = Math.max(0, Math.min(percentage, 100));
        const angle = (clampedPercentage / 100) * 360;
        const circleColor = clampedPercentage < 50 ? 'green' : 'red';
        const dynamicColor = clampedPercentage < 50 ? 'green' : 'red';

        output.innerHTML = `
            <div class="circular-progress-container">
                <div class="circular-progress ${circleColor}" style="background: conic-gradient(${dynamicColor} 0deg, ${dynamicColor} 0deg);">
                    <div class="percentage">${clampedPercentage}%</div>
                </div>
                <div class="circular-progress-message ${circleColor}">
                    This essay is ${clampedPercentage}% generated by AI
                </div>
            </div>
        `;

        // Animate the progress from 0Â° to the calculated angle
        const progressCircle = document.querySelector('.circular-progress');
        let currentAngle = 0;
        const interval = setInterval(() => {
            if (currentAngle >= angle) {
                clearInterval(interval);
            } else {
                currentAngle++;
                progressCircle.style.background = `conic-gradient(${dynamicColor} 0deg, ${dynamicColor} ${currentAngle}deg, #e6e6e6 ${currentAngle}deg)`;
                progressCircle.querySelector('.percentage').textContent = `${Math.round((currentAngle / 360) * 100)}%`;
            }
        }, 10);
        
    } catch (error) {
        output.innerHTML = `
            <div class="error">
                <i class="fas fa-exclamation-triangle"></i> Error: ${error.message}
            </div>
        `;
        console.error("Error during API call:", error);
    }
}